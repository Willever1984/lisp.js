parser = (function(){
  /* Generated by PEG.js (http://pegjs.majda.cz/). */
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.grammarParser.SyntaxError| describing the error.
     */
    parse: function(input) {
      var pos = 0;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};
      
      function quoteString(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')        // backslash
          .replace(/"/g, '\\"')          // closing quote character
          .replace(/\r/g, '\\r')         // carriage return
          .replace(/\u2028/g, '\\u2028') // line separator
          .replace(/\u2029/g, '\\u2029') // paragraph separator
          .replace(/\n/g, '\\n')         // line feed
          + '"';
      }
      
      function arrayContains(array, value) {
        /*
         * Stupid IE does not have Array.prototype.indexOf, otherwise this
         * function would be a one-liner.
         */
        var length = array.length;
        for (var i = 0; i < length; i++) {
          if (array[i] === value) {
            return true;
          }
        }
        return false;
      }
      
      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }
        
        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }
        
        if (!arrayContains(rightmostMatchFailuresExpected, failure)) {
          rightmostMatchFailuresExpected.push(failure);
        }
      }
      
      function parse_seq(context) {
        var cacheKey = "seq" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos1 = pos;
        var result9 = parse_expr(context);
        if (result9 !== null) {
          var result10 = [];
          var result11 = parse_seq(context);
          while (result11 !== null) {
            result10.push(result11);
            var result11 = parse_seq(context);
          }
          if (result10 !== null) {
            var result8 = [result9, result10];
          } else {
            var result8 = null;
            pos = savedPos1;
          }
        } else {
          var result8 = null;
          pos = savedPos1;
        }
        var result7 = result8 !== null
          ? (function(e, s) { 
                    var result = [];
                    if (e.type != "WHITESPACE") result.push(e);
                    for (i=0; i< s.length; i++) { 
                        if (s[i].type != "WHITESPACE") result = result.concat(s[i]);
                    } 
                    return result;
                })(result8[0], result8[1])
          : null;
        if (result7 !== null) {
          var result0 = result7;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 1) === "'") {
            var result3 = "'";
            pos += 1;
          } else {
            var result3 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("'"));
            }
          }
          if (result3 !== null) {
            var result4 = parse_expr(context);
            if (result4 !== null) {
              var result5 = [];
              var result6 = parse_seq(context);
              while (result6 !== null) {
                result5.push(result6);
                var result6 = parse_seq(context);
              }
              if (result5 !== null) {
                var result2 = [result3, result4, result5];
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          var result1 = result2 !== null
            ? (function(e, s) { 
                      var result = [];
                      if (e.type != "WHITESPACE") result.push(e);
                      
                      var q = [{type:"QUOTE", value:result,line:line, pos:pos-prev_line_pos}];
                      for (i=0; i < s.length; i++) {
                          if (s[i].type != "WHITESPACE") q = q.concat(s[i]);
                      }
                      return q;
                  })(result2[1], result2[2])
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_list(context) {
        var cacheKey = "list" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos3 = pos;
        if (input.substr(pos, 1) === "(") {
          var result19 = "(";
          pos += 1;
        } else {
          var result19 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("("));
          }
        }
        if (result19 !== null) {
          var result20 = parse_seq(context);
          if (result20 !== null) {
            if (input.substr(pos, 1) === ")") {
              var result21 = ")";
              pos += 1;
            } else {
              var result21 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString(")"));
              }
            }
            if (result21 !== null) {
              var result18 = [result19, result20, result21];
            } else {
              var result18 = null;
              pos = savedPos3;
            }
          } else {
            var result18 = null;
            pos = savedPos3;
          }
        } else {
          var result18 = null;
          pos = savedPos3;
        }
        var result17 = result18 !== null
          ? (function(s) { return {type:"SEQ",value:s}; })(result18[1])
          : null;
        if (result17 !== null) {
          var result0 = result17;
        } else {
          var savedPos2 = pos;
          if (input.substr(pos, 1) === "[") {
            var result13 = "[";
            pos += 1;
          } else {
            var result13 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("["));
            }
          }
          if (result13 !== null) {
            var result14 = [];
            var result16 = parse__(context);
            while (result16 !== null) {
              result14.push(result16);
              var result16 = parse__(context);
            }
            if (result14 !== null) {
              if (input.substr(pos, 1) === "]") {
                var result15 = "]";
                pos += 1;
              } else {
                var result15 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("]"));
                }
              }
              if (result15 !== null) {
                var result12 = [result13, result14, result15];
              } else {
                var result12 = null;
                pos = savedPos2;
              }
            } else {
              var result12 = null;
              pos = savedPos2;
            }
          } else {
            var result12 = null;
            pos = savedPos2;
          }
          var result11 = result12 !== null
            ? (function() { return {type:"VEC",value:[],line:line}; })()
            : null;
          if (result11 !== null) {
            var result0 = result11;
          } else {
            var savedPos1 = pos;
            if (input.substr(pos, 1) === "[") {
              var result8 = "[";
              pos += 1;
            } else {
              var result8 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("["));
              }
            }
            if (result8 !== null) {
              var result9 = parse_seq(context);
              if (result9 !== null) {
                if (input.substr(pos, 1) === "]") {
                  var result10 = "]";
                  pos += 1;
                } else {
                  var result10 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString("]"));
                  }
                }
                if (result10 !== null) {
                  var result7 = [result8, result9, result10];
                } else {
                  var result7 = null;
                  pos = savedPos1;
                }
              } else {
                var result7 = null;
                pos = savedPos1;
              }
            } else {
              var result7 = null;
              pos = savedPos1;
            }
            var result6 = result7 !== null
              ? (function(s) { return {type:"VEC",value:s,line:line}; })(result7[1])
              : null;
            if (result6 !== null) {
              var result0 = result6;
            } else {
              var savedPos0 = pos;
              if (input.substr(pos, 1) === "{") {
                var result3 = "{";
                pos += 1;
              } else {
                var result3 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("{"));
                }
              }
              if (result3 !== null) {
                var result4 = parse_seq(context);
                if (result4 !== null) {
                  if (input.substr(pos, 1) === "}") {
                    var result5 = "}";
                    pos += 1;
                  } else {
                    var result5 = null;
                    if (context.reportMatchFailures) {
                      matchFailed(quoteString("}"));
                    }
                  }
                  if (result5 !== null) {
                    var result2 = [result3, result4, result5];
                  } else {
                    var result2 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos0;
                }
              } else {
                var result2 = null;
                pos = savedPos0;
              }
              var result1 = result2 !== null
                ? (function(s) { return {type:"MAP",value:s,line:line}; })(result2[1])
                : null;
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_expr(context) {
        var cacheKey = "expr" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result6 = parse_integer(context);
        if (result6 !== null) {
          var result0 = result6;
        } else {
          var result5 = parse_keyword(context);
          if (result5 !== null) {
            var result0 = result5;
          } else {
            var result4 = parse_symbol(context);
            if (result4 !== null) {
              var result0 = result4;
            } else {
              var result3 = parse_string(context);
              if (result3 !== null) {
                var result0 = result3;
              } else {
                var result2 = parse_list(context);
                if (result2 !== null) {
                  var result0 = result2;
                } else {
                  var result1 = parse__(context);
                  if (result1 !== null) {
                    var result0 = result1;
                  } else {
                    var result0 = null;;
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_string(context) {
        var cacheKey = "string" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "\"") {
          var result2 = "\"";
          pos += 1;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("\""));
          }
        }
        if (result2 !== null) {
          if (input.substr(pos).match(/^[^"\n]/) !== null) {
            var result5 = input.charAt(pos);
            pos++;
          } else {
            var result5 = null;
            if (context.reportMatchFailures) {
              matchFailed("[^\"\\n]");
            }
          }
          if (result5 !== null) {
            var result3 = [];
            while (result5 !== null) {
              result3.push(result5);
              if (input.substr(pos).match(/^[^"\n]/) !== null) {
                var result5 = input.charAt(pos);
                pos++;
              } else {
                var result5 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[^\"\\n]");
                }
              }
            }
          } else {
            var result3 = null;
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === "\"") {
              var result4 = "\"";
              pos += 1;
            } else {
              var result4 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("\""));
              }
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(str) { return {type:"STRING", value:str.join(""),pos:(pos-prev_line_pos-str.join("").length-1+1),line:line}; })(result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_keyword(context) {
        var cacheKey = "keyword" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === ":") {
          var result2 = ":";
          pos += 1;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString(":"));
          }
        }
        if (result2 !== null) {
          var result3 = parse_symbol(context);
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(kw) { return {type:"KEYWORD", value:kw.value,pos:(pos-prev_line_pos-kw.pos-1+1),line:line}; })(result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_symbol(context) {
        var cacheKey = "symbol" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[\-+*\/!@%^&=.a-zA-Z0-9_]/) !== null) {
          var result2 = input.charAt(pos);
          pos++;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed("[\\-+*\\/!@%^&=.a-zA-Z0-9_]");
          }
        }
        if (result2 !== null) {
          var result1 = [];
          while (result2 !== null) {
            result1.push(result2);
            if (input.substr(pos).match(/^[\-+*\/!@%^&=.a-zA-Z0-9_]/) !== null) {
              var result2 = input.charAt(pos);
              pos++;
            } else {
              var result2 = null;
              if (context.reportMatchFailures) {
                matchFailed("[\\-+*\\/!@%^&=.a-zA-Z0-9_]");
              }
            }
          }
        } else {
          var result1 = null;
        }
        var result0 = result1 !== null
          ? (function(sym) { return {type:"SYMBOL", value:sym.join(""),pos:(pos-prev_line_pos-sym.join("").length+1),line:line}; })(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_integer(context) {
        var cacheKey = "integer" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[0-9]/) !== null) {
          var result2 = input.charAt(pos);
          pos++;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed("[0-9]");
          }
        }
        if (result2 !== null) {
          var result1 = [];
          while (result2 !== null) {
            result1.push(result2);
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result2 = input.charAt(pos);
              pos++;
            } else {
              var result2 = null;
              if (context.reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          var result1 = null;
        }
        var result0 = result1 !== null
          ? (function(digits) { return {type:"INTEGER", value:parseInt(digits.join("")) ,pos:(pos-prev_line_pos-digits.join("").length+1),line:line}; })(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse__(context) {
        var cacheKey = "_" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[ 	\n\r,;]/) !== null) {
          var result2 = input.charAt(pos);
          pos++;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed("[ 	\\n\\r,;]");
          }
        }
        if (result2 !== null) {
          var result1 = [];
          while (result2 !== null) {
            result1.push(result2);
            if (input.substr(pos).match(/^[ 	\n\r,;]/) !== null) {
              var result2 = input.charAt(pos);
              pos++;
            } else {
              var result2 = null;
              if (context.reportMatchFailures) {
                matchFailed("[ 	\\n\\r,;]");
              }
            }
          }
        } else {
          var result1 = null;
        }
        var result0 = result1 !== null
          ? (function(w) { if (w.join("") == "\n") {line++; prev_line_pos = pos;} return {type:"WHITESPACE"}; })(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          switch (failuresExpected.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpected[0];
            default:
              failuresExpected.sort();
              return failuresExpected.slice(0, failuresExpected.length - 1).join(', ')
                + ' or '
                + failuresExpected[failuresExpected.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quoteString(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      
        var line = 1;
      
        var prev_line_pos = 0;
      
    
      
      var result = parse_seq({ reportMatchFailures: true });
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();